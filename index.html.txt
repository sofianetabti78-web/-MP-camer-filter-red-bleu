<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Sofiane — Camera Filter</title>
  <style>
    :root { --overlay-alpha: 0.25; }
    html,body { height:100%; margin:0; background:#000; font-family:system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial; color:#fff; }
    .wrap { position:relative; width:100%; height:100vh; overflow:hidden; display:flex; align-items:center; justify-content:center; }
    video { width:100%; height:100%; object-fit:cover; transform:scaleX(-1); filter:contrast(1.1) saturate(1.2); }
    .redblue { position:absolute; inset:0; pointer-events:none; mix-blend-mode:overlay;
      background: linear-gradient(90deg, rgba(255,0,0,var(--overlay-alpha)) 0%, rgba(255,0,0,var(--overlay-alpha)) 50%, rgba(0,0,255,var(--overlay-alpha)) 100%);
    }
    .controls { position:absolute; top:12px; left:12px; z-index:4; display:flex; gap:8px; background:rgba(0,0,0,0.35); padding:8px; border-radius:8px; }
    .btn { background:transparent; border:1px solid rgba(255,255,255,0.12); color:#fff; padding:6px 10px; border-radius:6px; cursor:pointer; }
    .label { position:absolute; bottom:12px; left:12px; font-size:14px; background:rgba(0,0,0,0.35); padding:6px 8px; border-radius:6px; }
  </style>
</head>
<body>
  <div class="wrap">
    <video id="camera" autoplay playsinline></video>
    <div class="redblue" id="overlay"></div>

    <div class="controls" id="controls">
      <button class="btn" id="toggleMirror">Mirror</button>
      <button class="btn" id="cycleAlpha">Alpha: 0.25</button>
      <button class="btn" id="downloadSnapshot">Snapshot</button>
    </div>

    <div class="label">Sofiane — Camera Filter</div>
  </div>

  <script>
    const video = document.getElementById('camera');
    const overlay = document.getElementById('overlay');
    const btnMirror = document.getElementById('toggleMirror');
    const btnAlpha = document.getElementById('cycleAlpha');
    const btnSnap = document.getElementById('downloadSnapshot');

    async function startCamera() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" }, audio: false });
        video.srcObject = stream;
      } catch (err) {
        alert("طلب الوصول للكاميرا مرفوض أو غير متاح: " + err.message);
      }
    }

    startCamera();

    // Mirror toggle
    let mirrored = true;
    btnMirror.addEventListener('click', () => {
      mirrored = !mirrored;
      video.style.transform = mirrored ? 'scaleX(-1)' : 'scaleX(1)';
      btnMirror.textContent = mirrored ? 'Mirror' : 'No Mirror';
    });

    // Cycle overlay alpha
    const alphas = [0.15, 0.25, 0.4];
    let ai = 1;
    btnAlpha.addEventListener('click', () => {
      ai = (ai + 1) % alphas.length;
      document.documentElement.style.setProperty('--overlay-alpha', alphas[ai]);
      btnAlpha.textContent = 'Alpha: ' + alphas[ai];
    });

    // Snapshot download
    btnSnap.addEventListener('click', () => {
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const ctx = canvas.getContext('2d');
      // draw video (unmirrored)
      ctx.translate(canvas.width, 0);
      ctx.scale(-1,1);
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      // draw overlay gradient on top
      const grad = ctx.createLinearGradient(0,0,canvas.width,0);
      const alpha = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--overlay-alpha')) || 0.25;
      grad.addColorStop(0, 'rgba(255,0,0,'+alpha+')');
      grad.addColorStop(1, 'rgba(0,0,255,'+alpha+')');
      ctx.fillStyle = grad;
      ctx.fillRect(0,0,canvas.width,canvas.height);
      const data = canvas.toDataURL('image/png');
      const a = document.createElement('a');
      a.href = data; a.download = 'sofiane_snapshot.png'; a.click();
    });
  </script>
</body>
</html>
